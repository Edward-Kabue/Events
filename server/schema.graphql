# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input Credentials {
  password: String!
  username: String!
}

type Customer {
  createdAt: DateTime!
  email: String
  firstname: String
  id: String!
  lastname: String
  phoneNumber: Float
  updatedAt: DateTime!
}

input CustomerCreateInput {
  email: String
  firstname: String
  lastname: String
  phoneNumber: Float
}

input CustomerOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  firstname: SortOrder
  id: SortOrder
  lastname: SortOrder
  phoneNumber: SortOrder
  updatedAt: SortOrder
}

input CustomerUpdateInput {
  email: String
  firstname: String
  lastname: String
  phoneNumber: Float
}

input CustomerWhereInput {
  email: StringNullableFilter
  firstname: StringNullableFilter
  id: StringFilter
  lastname: StringNullableFilter
  phoneNumber: IntNullableFilter
}

input CustomerWhereUniqueInput {
  id: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type EventOrganizer {
  bankAccount: Float
  createdAt: DateTime!
  firstname: String
  id: String!
  lastname: String
  phoneNumber: Float
  tickets(orderBy: [TicketOrderByInput!], skip: Float, take: Float, where: TicketWhereInput): [Ticket!]!
  updatedAt: DateTime!
}

input EventOrganizerCreateInput {
  bankAccount: Float
  firstname: String
  lastname: String
  phoneNumber: Float
  tickets: TicketCreateNestedManyWithoutEventOrganizersInput
}

input EventOrganizerOrderByInput {
  bankAccount: SortOrder
  createdAt: SortOrder
  firstname: SortOrder
  id: SortOrder
  lastname: SortOrder
  phoneNumber: SortOrder
  updatedAt: SortOrder
}

input EventOrganizerUpdateInput {
  bankAccount: Float
  firstname: String
  lastname: String
  phoneNumber: Float
  tickets: TicketUpdateManyWithoutEventOrganizersInput
}

input EventOrganizerWhereInput {
  bankAccount: FloatNullableFilter
  firstname: StringNullableFilter
  id: StringFilter
  lastname: StringNullableFilter
  phoneNumber: IntNullableFilter
  tickets: TicketListRelationFilter
}

input EventOrganizerWhereUniqueInput {
  id: String!
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createCustomer(data: CustomerCreateInput!): Customer!
  createEventOrganizer(data: EventOrganizerCreateInput!): EventOrganizer!
  createTicket(data: TicketCreateInput!): Ticket!
  createUser(data: UserCreateInput!): User!
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer!
  deleteEventOrganizer(where: EventOrganizerWhereUniqueInput!): EventOrganizer!
  deleteTicket(where: TicketWhereUniqueInput!): Ticket!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer!
  updateEventOrganizer(data: EventOrganizerUpdateInput!, where: EventOrganizerWhereUniqueInput!): EventOrganizer!
  updateTicket(data: TicketUpdateInput!, where: TicketWhereUniqueInput!): Ticket!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Query {
  _customersMeta(orderBy: [CustomerOrderByInput!], skip: Float, take: Float, where: CustomerWhereInput): MetaQueryPayload!
  _eventOrganizersMeta(orderBy: [EventOrganizerOrderByInput!], skip: Float, take: Float, where: EventOrganizerWhereInput): MetaQueryPayload!
  _ticketsMeta(orderBy: [TicketOrderByInput!], skip: Float, take: Float, where: TicketWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  customer(where: CustomerWhereUniqueInput!): Customer
  customers(orderBy: [CustomerOrderByInput!], skip: Float, take: Float, where: CustomerWhereInput): [Customer!]!
  eventOrganizer(where: EventOrganizerWhereUniqueInput!): EventOrganizer
  eventOrganizers(orderBy: [EventOrganizerOrderByInput!], skip: Float, take: Float, where: EventOrganizerWhereInput): [EventOrganizer!]!
  ticket(where: TicketWhereUniqueInput!): Ticket
  tickets(orderBy: [TicketOrderByInput!], skip: Float, take: Float, where: TicketWhereInput): [Ticket!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type Ticket {
  createdAt: DateTime!
  eventId: EventOrganizer
  id: String!
  updatedAt: DateTime!
}

input TicketCreateInput {
  eventId: EventOrganizerWhereUniqueInput
}

input TicketCreateNestedManyWithoutEventOrganizersInput {
  connect: [TicketWhereUniqueInput!]
}

input TicketListRelationFilter {
  every: TicketWhereInput
  none: TicketWhereInput
  some: TicketWhereInput
}

input TicketOrderByInput {
  createdAt: SortOrder
  eventIdId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input TicketUpdateInput {
  eventId: EventOrganizerWhereUniqueInput
}

input TicketUpdateManyWithoutEventOrganizersInput {
  connect: [TicketWhereUniqueInput!]
  disconnect: [TicketWhereUniqueInput!]
  set: [TicketWhereUniqueInput!]
}

input TicketWhereInput {
  eventId: EventOrganizerWhereUniqueInput
  id: StringFilter
}

input TicketWhereUniqueInput {
  id: String!
}

type User {
  createdAt: DateTime!
  email: String
  firstName: String
  id: String!
  lastName: String
  roles: [String!]!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  email: String
  firstName: String
  lastName: String
  password: String!
  roles: [String!]!
  username: String!
}

type UserInfo {
  accessToken: String
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  email: String
  firstName: String
  lastName: String
  password: String
  roles: [String!]
  username: String
}

input UserWhereInput {
  email: StringNullableFilter
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}

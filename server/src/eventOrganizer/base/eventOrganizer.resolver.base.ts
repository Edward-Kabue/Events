/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateEventOrganizerArgs } from "./CreateEventOrganizerArgs";
import { UpdateEventOrganizerArgs } from "./UpdateEventOrganizerArgs";
import { DeleteEventOrganizerArgs } from "./DeleteEventOrganizerArgs";
import { EventOrganizerFindManyArgs } from "./EventOrganizerFindManyArgs";
import { EventOrganizerFindUniqueArgs } from "./EventOrganizerFindUniqueArgs";
import { EventOrganizer } from "./EventOrganizer";
import { EventOrganizerService } from "../eventOrganizer.service";

@graphql.Resolver(() => EventOrganizer)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class EventOrganizerResolverBase {
  constructor(
    protected readonly service: EventOrganizerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EventOrganizer",
    action: "read",
    possession: "any",
  })
  async _eventOrganizersMeta(
    @graphql.Args() args: EventOrganizerFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EventOrganizer])
  @nestAccessControl.UseRoles({
    resource: "EventOrganizer",
    action: "read",
    possession: "any",
  })
  async eventOrganizers(
    @graphql.Args() args: EventOrganizerFindManyArgs
  ): Promise<EventOrganizer[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EventOrganizer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EventOrganizer",
    action: "read",
    possession: "own",
  })
  async eventOrganizer(
    @graphql.Args() args: EventOrganizerFindUniqueArgs
  ): Promise<EventOrganizer | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EventOrganizer)
  @nestAccessControl.UseRoles({
    resource: "EventOrganizer",
    action: "create",
    possession: "any",
  })
  async createEventOrganizer(
    @graphql.Args() args: CreateEventOrganizerArgs
  ): Promise<EventOrganizer> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EventOrganizer)
  @nestAccessControl.UseRoles({
    resource: "EventOrganizer",
    action: "update",
    possession: "any",
  })
  async updateEventOrganizer(
    @graphql.Args() args: UpdateEventOrganizerArgs
  ): Promise<EventOrganizer | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EventOrganizer)
  @nestAccessControl.UseRoles({
    resource: "EventOrganizer",
    action: "delete",
    possession: "any",
  })
  async deleteEventOrganizer(
    @graphql.Args() args: DeleteEventOrganizerArgs
  ): Promise<EventOrganizer | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
